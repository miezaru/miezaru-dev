@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

// change scss variables to css variables
@mixin add-css-variables($module) {
    :root {
        @each $name, $value in $module {
            --#{$name}: #{$value};
        }
    }
}

// add font-face declarations
@function str-replace($string, $search, $replace: '') {
    $index: list.index($string, $search);

    @if $index {
        @return slice($string, 1, $index - 1) + $replace +
            str-replace(slice($string, $index + list.length($search)), $search, $replace);
    }

    @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
        eot: '?',
        svg: '#' + str-replace($name, ' ', '_'),
    );

    $formats: (
        otf: 'opentype',
        ttf: 'truetype',
    );

    @each $ext in $exts {
        $extmod: if(map.has-key($extmods, $ext), $ext + map.get($extmods, $ext), $ext);
        $format: if(map.has-key($formats, $ext), map.get($formats, $ext), $ext);
        $src: list.append(
            $src,
            url(string.quote($path + '.' + $extmod)) format(string.quote($format)),
            comma
        );
    }

    @font-face {
        font-family: string.quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
        font-display: swap;
    }
}

// media queries
@mixin res-small-phone {
    @media (max-width: 22.5em) {
        // 360px
        @content;
    }
}

@mixin res-phone {
    @media (max-width: 37.5em) {
        // 600px
        @content;
    }
}

@mixin res-tab-port {
    @media (max-width: 56.25em) {
        // 900px
        @content;
    }
}

@mixin res-tab-land {
    @media (max-width: 75em) {
        // 1200px
        @content;
    }
}

@mixin res-desktop {
    @media (max-width: 81.25em) {
        // 1300px
        @content;
    }
}

@mixin res-big-desktop {
    @media (max-width: 118.75em) {
        // 1900px
        @content;
    }
}
